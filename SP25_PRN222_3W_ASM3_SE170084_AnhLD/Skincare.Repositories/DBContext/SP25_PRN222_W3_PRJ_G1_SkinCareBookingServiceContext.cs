// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Skincare.Repositories.Models;

public partial class SP25_PRN222_W3_PRJ_G1_SkinCareBookingServiceContext : DbContext
{
    public SP25_PRN222_W3_PRJ_G1_SkinCareBookingServiceContext()
    {
    }

    public SP25_PRN222_W3_PRJ_G1_SkinCareBookingServiceContext(DbContextOptions<SP25_PRN222_W3_PRJ_G1_SkinCareBookingServiceContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CustomerServiceHistory> CustomerServiceHistories { get; set; }

    public virtual DbSet<ServiceProviderInfo> ServiceProviderInfos { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(GetConnectionString());
        }
    }

    private string GetConnectionString()
    {
        IConfiguration configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", true, true).Build();
        return configuration["ConnectionStrings:DefaultConnectionString"];
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CustomerServiceHistory>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64D846ECA780");

            entity.Property(e => e.CustomerId).ValueGeneratedNever();

            entity.HasOne(d => d.Provider).WithMany(p => p.CustomerServiceHistories).HasConstraintName("FK__CustomerS__Provi__68487DD7");
        });

        modelBuilder.Entity<ServiceProviderInfo>(entity =>
        {
            entity.HasKey(e => e.ProviderId).HasName("PK__ServiceP__B54C687D40946102");

            entity.Property(e => e.ProviderId).ValueGeneratedNever();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}